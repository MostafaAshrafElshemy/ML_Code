# -*- coding: utf-8 -*-
"""adidas-sales-eda.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16Mg5WlEQW3iQj3MhkgPjUpbQUfT7XdZw

### Loading Data & Libraries
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import datetime as dt

data = pd.read_csv('/kaggle/input/dataset/data_sales (1).csv')

"""### Dataset Explanation

‚Ä¢	Retailer: Represents the business or individual that sells Adidas products directly to consumers.

‚Ä¢	Retailer ID: A unique identifier assigned to each retailer in the dataset.

‚Ä¢	Invoice Date: The date when a particular invoice or sales transaction took place.

‚Ä¢	Region: Refers to a specific geographical area or district where the sales activity or retail operations occur.

‚Ä¢	State: Represents a specific administrative division or territory within a country.

‚Ä¢	City: Refers to an urban area or municipality where the sales activity or retail operations are conducted.

‚Ä¢	Product: Represents the classification or grouping of Adidas products.

‚Ä¢	Price per Unit: The cost or price associated with a single unit of a product.

‚Ä¢	Units Sold: The quantity or number of units of a particular product sold during a specific sales transaction.

‚Ä¢	Total Sales: The overall revenue generated from the sales transactions.

‚Ä¢	Operating Profit: The profit earned by the retailer from its normal business operations.

‚Ä¢	Sales Method: The approach or channel used by the retailer to sell its products or services.

### Show sample of data
"""

data.head()

data.shape

data.info()

data.isna().sum() / data.shape[0]

data.duplicated().sum()

data.describe(include = object)

# set style of visualization

sns.set_style("whitegrid")
sns.set_palette("RdBu")

# drop column have missing value in Price per units columns

data.dropna(subset = "Price per Unit", inplace = True)

data.isna().sum()

"""### Discover `Retailer` column"""

data['Retailer'].unique()

graph = sns.countplot(x = "Retailer", data = data, order = data.Retailer.value_counts().index)
for container in graph.containers:
    graph.bar_label(container)
plt.show()

"""### Discover `Invoice Date` column"""

data["Invoice Date"].unique()[:50]

# convert data type to date time

data['Invoice Date'] = pd.to_datetime(data['Invoice Date'])
data['Invoice Date']

# extract month

data['Month'] = data['Invoice Date'].dt.month
data['Month']

# extract year

data['Year'] = data['Invoice Date'].dt.year
data['Year']

# extract day

data['Day'] = data['Invoice Date'].dt.day
data['Day']

# create season column

def find_seasons(monthNumber):
    if monthNumber in [12, 1, 2]:
        return 'Winter'

    elif monthNumber in [3, 4, 5]:
        return 'Spring'

    elif monthNumber in [6, 7, 8]:
        return 'Summer'

    elif monthNumber in [9, 10, 11]:
        return 'Autumn'

data['Season'] = data['Month'].apply(find_seasons)
data['Season']

# convert mont column to month name

data['Month'] = pd.to_datetime(data['Month'], format='%m').dt.month_name()

# drop Invoice Date, Retailer ID columns

data.drop(columns = ['Retailer ID', 'Invoice Date'], inplace = True)

data.sample(2)

# convert some column datatype

data["Day"] = data['Day'].astype('category')
# -----------------
data['Season'] = data['Season'].astype('category')
# -----------------
data['Year'] = data['Year'].astype('category')

graph = sns.catplot(x = "Season", col = "Year", data = data, kind = "count")
plt.show()

"""### Discover `Region` column"""

data['Region'].unique()

graph = sns.countplot(x = "Region", data = data, order = data.Region.value_counts().index)
for container in graph.containers:
    graph.bar_label(container)
plt.show()

"""### Discover `State` column"""

data['State'].unique()

data['State'].nunique()

plt.figure(figsize = (15,6))
graph = sns.countplot(x = "State", data = data, order = data.State.value_counts()[:20].index, palette = "RdBu")
for container in graph.containers:
    graph.bar_label(container)

plt.xticks(rotation = 45)
plt.show()

"""### Discover `City` column"""

data['City'].unique()

data['City'].nunique()

plt.figure(figsize = (15,6))
graph = sns.countplot(x = "City", data = data, order = data.City.value_counts()[:20].index, palette = "RdBu")
for container in graph.containers:
    graph.bar_label(container)

plt.xticks(rotation = 45)
plt.show()

"""### Discover ` Product` column"""

print(data['Product'].nunique())
print('-' * 20)
print(data['Product'].unique())

# replace replace <Men's aparel> with <Men's Apparel>

data['Product'] = data['Product'].replace("Men's aparel", "Men's Apparel")

print(data['Product'].nunique())
print('-' * 20)
print(data['Product'].unique())

graph = sns.countplot(y = "Product", data = data, order = data.Product.value_counts()[:20].index)
for container in graph.containers:
    graph.bar_label(container)

plt.xticks(rotation = 45)
plt.show()

"""‚ö†Ô∏è  `We may need to modify the data to equivalent values, such as ‚ÄúMen‚Äôs Street Footwear‚Äù and ‚ÄúMen‚Äôs Athletic Footwear‚Äù but after knowing the price for each of them.`

### Discover `Price per Unit` column
"""

data['Price per Unit'].unique()

# remone $

def removeDollarSign(price):
    return price.replace('$', '')

data['Price per Unit'] = data['Price per Unit'].apply(removeDollarSign)
data['Price per Unit']

# convert data type to numeric

data['Price per Unit'] = pd.to_numeric(data['Price per Unit'], errors = 'coerce')

# check nan value after assign error equal to "coerce"

data['Price per Unit'].isna().sum()

sns.boxplot(y = 'Price per Unit', data = data)
plt.show()

"""#### - `Some people may think that the column has outliers, but the values are correct for the types of sales`

### Discover ` Units Sold` column
"""

data['Units Sold'].unique()[-50:]

# replace comma with empty string

def replace_comma(Unit):
    return Unit.replace(',', '')

data['Units Sold'] = data['Units Sold'].apply(replace_comma)

# check comma removed or not

data['Units Sold'].unique()[-50:]

# convert data type to integer

data['Units Sold'] = data['Units Sold'].astype('int')

sns.histplot(data = data, x = "Units Sold", kde=True)
plt.show()

# show rows contain zero in Units Sold column

data[data["Units Sold"] == 0]

"""### ‚ö†Ô∏è `Sales may have been returned by customer and money was refunded to him `

### üí° `I decided to drop them`
"""

# drop rows contain zero

data = data[data['Units Sold'] != 0]

# visualized Units Sold column after fix inconsistent values

sns.histplot(x = "Units Sold", data = data, kde = True)
plt.show()

"""### Discover ` Total Sales` column"""

data['Total Sales'].unique()

# replace comma with empty string

data['Total Sales'] = data['Total Sales'].apply(replace_comma) # replace_comma function i created it above

# convert data type to numeric

data['Total Sales'] = pd.to_numeric(data['Total Sales'], errors = 'coerce', downcast = 'float')

data.sample(3)

"""#### ‚ö†Ô∏è From above some values in "Total Sales" is incorrect  And so it some value in "Operating Profit" column in same row is incorrect

#### üí°`I will to try fix thes`
"""

# create boll column Correct total column

# 1- Assign column values with total sales column values
data['Correct total'] = data['Total Sales']

# 2- Compare values with correct values
data['Correct total'] = data['Correct total'] == (data['Price per Unit'] * data['Units Sold'])

"""### Discover `Operating Profit ` column"""

data['Operating Profit'].unique()

# remone $

data['Operating Profit'] = data['Operating Profit'].apply(removeDollarSign) # removeDollarSign function i created it above
data['Operating Profit']

# replace comma with empty string

data['Operating Profit'] = data['Operating Profit'].apply(replace_comma) # replace_comma function i created it above
data['Operating Profit']

# convert data type to numeric

data['Operating Profit'] = pd.to_numeric(data['Operating Profit'], errors = 'coerce', downcast = 'float')

"""### üí° `Create "profit percentage" column`"""

# create column

data['profit_percentage'] = (data['Operating Profit'] / data['Total Sales']) * 100

# round values of column

data["profit_percentage"] = data['profit_percentage'].astype('float').round()

"""### Correct `Total Sales` column values"""

# Correct values

data['Total Sales'] = data['Price per Unit'] * data['Units Sold']

# calculate profit based on profit percentage column

data['Operating Profit'] = data['Total Sales'] * (data['profit_percentage'] / 100)

"""### Discover `Sales Method` column"""

data['Sales Method'].unique()

graph = sns.countplot(x = "Sales Method", data = data, order = data['Sales Method'].value_counts().index)
for container in graph.containers:
    graph.bar_label(container)
plt.show()

"""## **Summary**

- Drop rows have missing value in `Price per units` columns, Because This values are somewhat very small.
- In `Invoice Date column` i extract some values such as `year`, `month`,`day` and create `season` column based on month column and i drop it.
- In `Product`, There were duplicate values due to a spelling error and fixed this.
- In `Price per Unit`, i remove Dollar Sign and convert data type to numeric.
- In ` Units Sold`, replace comma with empty string and  convert data type to integer.
    - ‚ö†Ô∏è During discover this column I found zero values `Sales may have been returned by customer and money was refunded to him `
    - üí° `I decided to drop them`
    
- In `Total Sales` replace comma with empty string and convert data type to numeric.
    - ‚ö†Ô∏è During discover this column some values in "Total Sales" is incorrect  And so it some value in "Operating Profit" column in same row is incorrect
    - üí° I fixed this by using some `calculations and adding some columns to help me fix this`.
- In `Total Sales` i remove Dollar Sign,replace comma with empty string and convert data type to numeric.
"""

# Drop some columns that we don't need

data.drop(columns = ['Correct total', 'profit_percentage'], inplace = True)
data.sample(3)

"""## **Exploratory Data Analysis**"""

# create groupData function to group each column with Total Sales and Operating Profit

def groupData(columnName):
    return data.groupby(columnName).agg({'Total Sales' : sum, 'Operating Profit' : 'sum'})

# What is total sales, Operating Profit in each Retailer ?

RetailerSales = groupData('Retailer').sort_values(by = 'Total Sales', ascending = False)

# set size to plot
plt.figure(figsize = (15,6))

# create plot of Total Sales
plt.subplot(1, 2, 1)
sns.lineplot(x = RetailerSales.index, y = "Total Sales", data = RetailerSales, marker = "o")


# Create plot of Operating Profit
plt.subplot(1, 2, 2)
sns.lineplot(x = RetailerSales.index, y = "Operating Profit", data = RetailerSales, marker='o')

plt.show()

"""-  `West Gear` and `Foot locker` emerge as the top retailers, capturing 27% and 24% of sales, respectively."""

# Show Total Sales and Operating Profit

RetailerSales['sales percentage'] = (RetailerSales['Total Sales'] / RetailerSales['Total Sales'].sum()) * 100
RetailerSales

# What is total sales, Operating Profit in each Region ?


RegionSales = groupData('Region').sort_values(by = 'Total Sales', ascending = False)

# set size to plot
plt.figure(figsize = (15,6))

# create plot of Total Sales
plt.subplot(1, 2, 1)
sns.lineplot(x = RegionSales.index, y = "Total Sales", data = RegionSales, marker = "o")


# Create plot of Operating Profit
plt.subplot(1, 2, 2)
sns.lineplot(x = RegionSales.index, y = "Operating Profit", data = RegionSales, marker='o')

plt.show()

"""- `West` and `Northeast` emerge as the top Region, capture 30% and 21% of sales  respectively."""

# Show Total Sales and Operating Profit

RegionSales['sales percentage'] = ((RegionSales['Total Sales'] / RegionSales['Total Sales'].sum()) * 100).round()
RegionSales

# What is total sales, Operating Profit in each Product ?


ProductSales = groupData('Product').sort_values(by = 'Total Sales', ascending = False)

# set size to plot
plt.figure(figsize = (15,6))

# create plot of Total Sales
plt.subplot(1, 2, 1)
sns.lineplot(x = ProductSales.index, y = "Total Sales", data = ProductSales, marker = "o")
plt.xticks(rotation = 90)


# Create plot of Operating Profit
plt.subplot(1, 2, 2)
sns.lineplot(x = ProductSales.index, y = "Operating Profit", data = ProductSales, marker='o')
plt.xticks(rotation = 90)

plt.show()

"""- Top product categories such as `Men‚Äôs Street Footwear`, `Women‚Äôs Apparel`, and `Men‚Äôs Athletic Footwear`, which collectively account for 60% of total sales"""

# Show Total Sales and Operating Profit

ProductSales['sales percentage'] = ((ProductSales['Total Sales'] / ProductSales['Total Sales'].sum()) * 100).round()
ProductSales

# What is total sales, Operating Profit in each Season ?

SeasonSales = groupData('Season').sort_values(by = 'Total Sales', ascending = False)

# set size to plot
plt.figure(figsize = (15,6))

# create plot of Total Sales
plt.subplot(1, 2, 1)
sns.lineplot(x = SeasonSales.index, y = "Total Sales", data = SeasonSales, marker = "o")


# Create plot of Operating Profit
plt.subplot(1, 2, 2)
sns.lineplot(x = SeasonSales.index, y = "Operating Profit", data = SeasonSales, marker='o')

plt.show()

"""- Sales increase in the `summer` and `winter` seasons, which represent 29 % and 24%  of sales respectively.It may be due to school season or recreational breaks on the beach"""

# Show Total Sales and Operating Profit

SeasonSales['sales percentage'] = ((SeasonSales['Total Sales'] / SeasonSales['Total Sales'].sum()) * 100).round()
SeasonSales

# What is total sales, Operating Profit in each Sales Method ?

SalesMethod = groupData('Sales Method').sort_values(by = 'Total Sales', ascending = False)

# set size to plot
plt.figure(figsize = (15,6))

# create plot of Total Sales
plt.subplot(1, 2, 1)
sns.lineplot(x = SalesMethod.index, y = "Total Sales", data = SalesMethod, marker = "o")


# Create plot of Operating Profit
plt.subplot(1, 2, 2)
sns.lineplot(x = SalesMethod.index, y = "Operating Profit", data = SalesMethod, marker='o')

plt.show()

"""-  The `online sales method` ranked first with a percentage 37%, followed by `Outlet Sales method` with a percentage 33%"""

# Show Total Sales and Operating Profit

SalesMethod['sales percentage'] = ((SalesMethod['Total Sales'] / SalesMethod['Total Sales'].sum()) * 100).round()
SalesMethod

# What is total sales of each year ?

sales_by_month = data.groupby(['Year','Month'])['Total Sales'].sum().reset_index()

# create plot
plt.figure(figsize = (12,6))
sns.lineplot(x = "Month", y = "Total Sales", hue = "Year", data = sales_by_month, marker='o')

plt.show()

"""- In `2021`, sales were much higher than in `2020`, and the main reason for this was Covid-19."""

# Does the sale of a particular product increase or decrease during the seasons?

seasonSales = data.groupby(['Season', 'Product'])['Units Sold'].sum().reset_index().sort_values(
                                                                                        by = 'Units Sold', ascending = False)

# create plot
plt.figure(figsize = (18,8))
graph = sns.barplot(x = "Season", y = "Units Sold", hue = 'Product', data = seasonSales)
for container in graph.containers:
    graph.bar_label(container)

plt.show()

# Does the Sales Method increase or decrease during seasons?

seasonSalesMethod = data.groupby(['Season', 'Sales Method']).agg(Count = ('Sales Method', 'count'))

# create plot
plt.figure(figsize = (10,5))
sns.lineplot(x = "Season", y = "Count", hue = 'Sales Method', data = seasonSalesMethod, marker='o')

plt.show()

# What is the distribution of sales by top 20 state and city?

stateSales = groupData('State').sort_values(by = 'Total Sales', ascending = False)[:20]

# set size to plot
plt.figure(figsize = (15,6))

# create plot of Total Sales
plt.subplot(1, 2, 1)
sns.lineplot(x = stateSales.index, y = "Total Sales", data = stateSales, marker = "o")
plt.xticks(rotation = 90)


# Create plot of Operating Profit
plt.subplot(1, 2, 2)
sns.lineplot(x = stateSales.index, y = "Operating Profit", data = stateSales, marker='o')
plt.xticks(rotation = 90)

plt.show()

# What is the average price of products per unit ?

productsPerUnit = data.groupby('Product')['Price per Unit'].median().reset_index().sort_values(
                                                                                    by = 'Price per Unit', ascending = False)

plt.figure(figsize = (15,6))
graph = sns.barplot(x = 'Product', y = 'Price per Unit', data = productsPerUnit)

for container in graph.containers:
    graph.bar_label(container)

plt.show()
